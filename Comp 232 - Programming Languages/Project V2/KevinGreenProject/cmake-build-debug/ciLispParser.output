Rules never reduced

   12 s_expr_list: s_expr


State 4 conflicts: 2 shift/reduce
State 15 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: QUIT
    3       | NUMBER
    4       | SYMBOL
    5       | LPAREN FUNC s_expr_list RPAREN
    6       | LPAREN SYMBOL s_expr_list RPAREN
    7       | LPAREN scope s_expr RPAREN
    8       | LPAREN COND s_expr s_expr s_expr RPAREN
    9       | error

   10 s_expr_list: /* empty */
   11            | s_expr s_expr_list
   12            | s_expr

   13 scope: /* empty */
   14      | LPAREN LET let_list RPAREN

   15 let_list: let_elem
   16         | let_list let_elem

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   18         | LPAREN type SYMBOL s_expr RPAREN

   19 arg_list: SYMBOL arg_list
   20         | SYMBOL

   21 type: /* empty */
   22     | REAL
   23     | INTEGER


Terminals, with rules where they appear

$end (0) 0
error (256) 9
FUNC (258) 5
NUMBER (259) 3
SYMBOL (260) 4 6 17 18 19 20
LPAREN (261) 5 6 7 8 14 17 18
RPAREN (262) 5 6 7 8 14 17 18
EOL (263) 1
LET (264) 14
INTEGER (265) 23
REAL (266) 22
COND (267) 8
LAMBDA (268) 17
QUIT (269) 2


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1, on right: 0
s_expr (17)
    on left: 2 3 4 5 6 7 8 9, on right: 1 7 8 11 12 17 18
s_expr_list (18)
    on left: 10 11 12, on right: 5 6 11
scope (19)
    on left: 13 14, on right: 7
let_list (20)
    on left: 15 16, on right: 14 16
let_elem (21)
    on left: 17 18, on right: 15 16
arg_list (22)
    on left: 19 20, on right: 17 19
type (23)
    on left: 21 22 23, on right: 17 18


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    program  go to state 6
    s_expr   go to state 7


state 1

    9 s_expr: error .

    $default  reduce using rule 9 (s_expr)


state 2

    3 s_expr: NUMBER .

    $default  reduce using rule 3 (s_expr)


state 3

    4 s_expr: SYMBOL .

    $default  reduce using rule 4 (s_expr)


state 4

    5 s_expr: LPAREN . FUNC s_expr_list RPAREN
    6       | LPAREN . SYMBOL s_expr_list RPAREN
    7       | LPAREN . scope s_expr RPAREN
    8       | LPAREN . COND s_expr s_expr s_expr RPAREN

    FUNC    shift, and go to state 8
    SYMBOL  shift, and go to state 9
    LPAREN  shift, and go to state 10
    COND    shift, and go to state 11

    SYMBOL    [reduce using rule 13 (scope)]
    LPAREN    [reduce using rule 13 (scope)]
    $default  reduce using rule 13 (scope)

    scope  go to state 12


state 5

    2 s_expr: QUIT .

    $default  reduce using rule 2 (s_expr)


state 6

    0 $accept: program . $end

    $end  shift, and go to state 13


state 7

    1 program: s_expr . EOL

    EOL  shift, and go to state 14


state 8

    5 s_expr: LPAREN FUNC . s_expr_list RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 10 (s_expr_list)

    s_expr       go to state 15
    s_expr_list  go to state 16


state 9

    6 s_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 10 (s_expr_list)

    s_expr       go to state 15
    s_expr_list  go to state 17


state 10

   14 scope: LPAREN . LET let_list RPAREN

    LET  shift, and go to state 18


state 11

    8 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 19


state 12

    7 s_expr: LPAREN scope . s_expr RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 20


state 13

    0 $accept: program $end .

    $default  accept


state 14

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 15

   11 s_expr_list: s_expr . s_expr_list
   12            | s_expr .

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 10 (s_expr_list)
    RPAREN  [reduce using rule 12 (s_expr_list)]

    s_expr       go to state 15
    s_expr_list  go to state 21


state 16

    5 s_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 22


state 17

    6 s_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 23


state 18

   14 scope: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 24

    let_list  go to state 25
    let_elem  go to state 26


state 19

    8 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 27


state 20

    7 s_expr: LPAREN scope s_expr . RPAREN

    RPAREN  shift, and go to state 28


state 21

   11 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 11 (s_expr_list)


state 22

    5 s_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 5 (s_expr)


state 23

    6 s_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 6 (s_expr)


state 24

   17 let_elem: LPAREN . type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   18         | LPAREN . type SYMBOL s_expr RPAREN

    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30

    $default  reduce using rule 21 (type)

    type  go to state 31


state 25

   14 scope: LPAREN LET let_list . RPAREN
   16 let_list: let_list . let_elem

    LPAREN  shift, and go to state 24
    RPAREN  shift, and go to state 32

    let_elem  go to state 33


state 26

   15 let_list: let_elem .

    $default  reduce using rule 15 (let_list)


state 27

    8 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 34


state 28

    7 s_expr: LPAREN scope s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


state 29

   23 type: INTEGER .

    $default  reduce using rule 23 (type)


state 30

   22 type: REAL .

    $default  reduce using rule 22 (type)


state 31

   17 let_elem: LPAREN type . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   18         | LPAREN type . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 35


state 32

   14 scope: LPAREN LET let_list RPAREN .

    $default  reduce using rule 14 (scope)


state 33

   16 let_list: let_list let_elem .

    $default  reduce using rule 16 (let_list)


state 34

    8 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 36


state 35

   17 let_elem: LPAREN type SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   18         | LPAREN type SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    LAMBDA  shift, and go to state 37
    QUIT    shift, and go to state 5

    s_expr  go to state 38


state 36

    8 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 8 (s_expr)


state 37

   17 let_elem: LPAREN type SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 39


state 38

   18 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 40


state 39

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 41

    arg_list  go to state 42


state 40

   18 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 18 (let_elem)


state 41

   19 arg_list: SYMBOL . arg_list
   20         | SYMBOL .

    SYMBOL  shift, and go to state 41

    $default  reduce using rule 20 (arg_list)

    arg_list  go to state 43


state 42

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 44


state 43

   19 arg_list: SYMBOL arg_list .

    $default  reduce using rule 19 (arg_list)


state 44

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2
    SYMBOL  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 45


state 45

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 46


state 46

   17 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 17 (let_elem)
